#!/usr/bin/env node
"use strict";

//module dependencies
let server = require("../dist/server");
let cometServer = require("../dist/comet-server");
let debug = require("debug")("express:server");
let http = require("http");

//create http server
let httpPort = normalizePort(process.env.PORT || 4300);
let app = server.Server.bootstrap().app;
app.set("port", httpPort);
let httpServer = http.createServer(app);

//listen on provided ports
httpServer.listen(httpPort);

//add error handler
httpServer.on("error", onError);

//start listening on port
httpServer.on("listening", onListening);




let cometdServer = cometServer.CometdServer.bootstrap().cometdServer;
let httpServer1 = http.createServer(cometdServer.handle);

httpServer1.listen(4301, function (error, result) {
  console.log('In httpServer1', error, result);
  //   // Your application code here.
});

httpServer1.on("listening", onListening1);

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  let port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  let bind = typeof httpPort === "string"
    ? "Pipe " + httpPort
    : "Port " + httpPort;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  let addr = httpServer.address();
  let bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  console.log("Listening on " + bind);
  debug("Listening on " + bind);
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening1() {
  let addr = httpServer1.address();
  let bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  console.log("Listening on " + bind);
  debug("Listening on " + bind);
}